*dial.txt* help （Last updated: 2020/02/12）

A package that extends the standard Vim commands CTRL-A / CTRL-X to allow
increment/decrement of various strings, not limited to alphanumeric
characters.

Author: Mogami Shinichi (@monaqa) <mogassy{at}yahoo.co.jp>
Version: 0.2.0
License: MIT license
		<https://github.com/monaqa/dial.nvim/blob/master/LICENSE>

}}}

==============================================================================
CONTENTS								*dial-contents*

Requirements					|dial-requirements|
Introduction					|dial-introduction|
Keymappings						|dial-keymappings|
Commands						|dial-commands|
Configurations					|dial-configurations|
  Augends						|dial-augends|
    Number						|dial-augends-number|
    Date						|dial-augends-date|
    Char						|dial-augends-char|
  Default Augends				|dial-default-augends|
Customize						|dial-customize|
  Define Augends				|dial-define-augends|

==============================================================================
REQUIREMENTS							*dial-requirements*

* Neovim 0.5.0 or later (as of 2020/01/16, only available in nightly.)

==============================================================================
INTRODUCTION							*dial-introduction*

*dial.nvim* is a package that increments/decrements strings of various
formats. It extends the standard Vim commands such as CTRL-A, CTRL-X, and g
CTRL-A in VISUAL mode. For example, the following strings are covered.

Since this plugin does not replace the default key-mapping, you need to add
the following description to the configuration file after installing the
plugin.

>
	nmap <C-a> <Plug>(dial-increment)
	nmap <C-x> <Plug>(dial-decrement)
	vmap <C-a> <Plug>(dial-increment)
	vmap <C-x> <Plug>(dial-decrement)
	vmap g<C-a> <Plug>(dial-increment-additional)
	vmap g<C-x> <Plug>(dial-decrement-additional)
<

==============================================================================
KEYMAPPINGS								*dial-keymappings*

Normal Mode~

<Plug>(dial-increment)					*<Plug>(dial-increment)*

	Increments the number of addends under or after the cursor by [count].
	This is an alternative to the existing CTRL-A command.
	It responds only to addends that are on the same line as the cursor.
	Basically, it is not applied to addends that are before the cursor, but
	some types of addends may allow incrementing even if they are before the
	cursor.  (cf. |dial-augends-markup#markdown#header|)

<Plug>(dial-decrement)					*<Plug>(dial-decrement)*

	Decrements the number of addends under or after the cursor by [count].
	This is an alternative to the existing CTRL-X command.

Visual Mode~

{Visual}<Plug>(dial-increment)			*v_<Plug>(dial-increment)*

	Increments the number of addends in the visually selected text by [count].
	The behavior changes depending on which of the following modes you are in.
	* normal VISUAL mode (|v|)
	* linweise VISUAL mode (|V|)
	* blockwise VISUAL mode (|CTRL-V|)

	In normal VISUAL mode, this command increments the number of addends in
	the visually selected text by [count]. This is an alternative to the
	existing CTRL-A command in VISUAL mode.

	The selected text must match the predetermined pattern exactly.  For
	example, assume that decimal increment (|dial-augends-number#decimal|) and
	date increment (|dial-augends-date#[%-m/%-d]|) are enabled.  If `12/3` is
	selected out of `12/3456`, it will be assumed to be the string for
	December 3 and will result in `12/4456`, while if only `12` is selected,
	it will be assumed to be just a decimal number and will result in
	`13/3456`.

	In linweise VISUAL mode (|V|), this command increments the addends in the
	selected text by [count] per line. For each line, it searches for the
	position of the addend and targets only the one addend that is most
	left-hand.

	In linweise VISUAL mode (|V|), this command works similarly in linewise
	VISUAL mode, but the target is narrowed down to the selection.  Unlike
	that in normal VISUAL mode, the selected text does not have to match the
	predetermined pattern exactly.

{Visual}<Plug>(dial-decrement)			*v_<Plug>(dial-decrement)*

	Decrements the number of addends in the visually selected text by [count].

										*v_<Plug>(dial-increment-additional)*
{Visual}<Plug>(dial-increment-additional)

	In normal VISUAL mode, it is no different from the command
	|v_<Plug>(dial-increment)|. In linewise and blockwise VISUAL mode, the
	number of addends on line n, counting from the top, is increased by
	n * [count]. This is an alternative to the existing g CTRL-A command.
	It is useful when you want to create an equidistant sequence of numbers
	that increases by a fixed number, such as a bullet list or calendar.
	For example, consider you have the following list of dates:
>
		09/12
		09/12
		09/12
		09/12
<
	If you move the cursor to the second `09/12`, select the bottom three
	lines in line selection visual mode, and press `7g<C-a>`, you get:
>
		09/12
		09/19
		09/26
		10/03
<
	This is only available when the augend `date#[%m/%d]` is activated.

										*v_<Plug>(dial-decrement-additional)*
{Visual}<Plug>(dial-decrement-additional)

	In normal VISUAL mode, it is no different from the command
	|v_<Plug>(dial-increment)|. In linewise and blockwise VISUAL mode, the
	number of addends on line n, counting from the top, is decreased by
	n * [count]. This is an alternative to the existing g CTRL-X command.

==============================================================================
COMMANDS								*dial-commands*

:[range]DialIncrement {augend}			*:DialIncrement*

	Increments the augend specified by {augend} by 1 for the selected range.
	It is similar to |v_<Plug>(dial-increment)| in linewise visual mode, but
	allows you to specify and limit the objective augend.  Since it is not
	possible to specify the addend (i.e., how many to increment), it is
	assumed to be repeated using |@:|.

										*:DialIncrementAdditional*
:[range]DialIncrementAdditional {augend}

	Decrements the augend specified by {augend} by 1 for the selected range.

==============================================================================
CONFIGURATIONS							*dial-configurations*

|dial.nvim| allows you to specify the type of augend using a Lua script.
Augends have names such as |number#decimal|, and you can use any addend you
like by specifying the addend in your configuration file as follows:

>
	lua << EOF
	local dial = require"dial"
	dial.config.searchlist = {
	  normal = {
		% add some augend names here
		"number#decimal",
		"date#[%Y/%m/%d]",
		"date#[%m/%d]",
		"date#[%H:%M]",
	  },
	  visual = {
		% add some augend names here
		"number#decimal",
		"date#[%Y/%m/%d]",
		"date#[%m/%d]",
		"date#[%H:%M]",
		"color#hex",
		"char#alph#small#word",
		"char#alph#capital#word",
	  }
	}
	EOF
<

You can use the following augends.

------------------------------------------------------------------------------
AUGENDS									*dial-augends*

NUMBER									*dial-augends-number*
------

										*dial-augends-number#decimal*
number#decimal~

Increments/decrements a non-negative decimal number. It matches such as
>
	0
	123
	3141592
<
and each increment increases that number by one.  Unlike the standard CTRL-A
command, it does not consider any `-` at the beginning oc the number.  If you
perform |<Plug>(dial-increment)| with the cursor at `1` of the following
string:
>
	file-1.jpg
<
then you will get the following result.
>
	file-2.jpg
<

										*dial-augends-number#decimal#int*
number#decimal#int~

Basically the same as |dial-augends-number#decimal|, but this one also matches
negative integers.  If you perform |<Plug>(dial-increment)| with the cursor at
`1` of the following string:
>
	file-1.jpg
<
then you will get the following result.
>
	file0.jpg
<

									*dial-augends-number#decimal#fixed#zero*
number#decimal#fixed#zero~

The target of the match is the same as in |dial-augends-number#decimal|, but
this one assumes the target is an integer of fixed length, and increments or
decrements it as long as the number of digits does not change, where `0` is
used for digit filling.

If you perform |100<Plug>(dial-increment)| with the cursor at `1` of the
following string:
>
	file001.jpg
<
then you will get the following result:
>
	file101.jpg
<
and if you perform |1000<Plug>(dial-increment)| in that state, you will get:
>
	file999.jpg
<
Increment stops at 999 because the maximum three-digit number is 999.
Also, if you perform |995<Plug>(dial-increment)| in that state, you will get:
>
	file004.jpg
<
Any missing digits will be filled in with zeroes to compensate.

									*dial-augends-number#decimal#fixed#space*
number#decimal#fixed#space~

This assumes the target integer has fixed length, and increments/decrements
it as long as the number of digits does not change, where a half space is
used for digit filling.

If you perform |100<Plug>(dial-increment)| with the cursor at `1` of the
following string:
>
	file  1.jpg
<
then you will get the following result:
>
	file101.jpg
<
and if you perform |1000<Plug>(dial-increment)| in that state, you will get:
>
	file999.jpg
<
Increment stops at 999 because the maximum three-digit number is 999.
Also, if you perform |995<Plug>(dial-increment)| in that state, you will get:
>
	file  4.jpg
<
Any missing digits will be filled in with half spaces to compensate.

NOTE: It is recommended that this command be enabled only in VISUAL mode.

										*dial-augends-number#hex*
number#hex~

Matches a hexadecimal non-negative integer and increments/decrements in
hexadecimal notation. It matches strings such as:
>
	0x12
	0xafbf
	0xAFBF
<

										*dial-augends-number#octal*
number#octal~

Matches a octal non-negative integer and increments/decrements in octal
notation. It matches strings such as:
>
	037
	0567
	001212
<
WARNING: It may conflict with |number#decimal| and others.

										*dial-augends-number#binary*
number#binary~

Matches a binary non-negative integer and increments/decrements in binary
notation. It matches strings such as:
>
	0b00
	0b1010
	0b10100101
<

DATE									*dial-augends-date*
-----

										*dial-augends-date#[%Y/%m/%d]*
date#[%Y/%m/%d]~

Matches dates with the following format (year/month/day):
>
	1970/12/31
	2021/01/01
	2021/02/13
<

If the cursor is to the left of the format, the increment is always done in
date units, but if the cursor is on the format, the increment depends on the
specific position of the cursor.

Let's take `1970/12/31` as an example.

When the cursor is over any of the four `1970` characters, the year will be
incremented as shown below.
>
	1971/12/31
<

When the cursor is over any of the three `/12` characters, the month will be
incremented as shown below.
>
	1971/01/31
<

When the cursor is over any of the three `/31` characters, the day will be
incremented as shown below.
>
	1971/01/01
<

The format matches dates that do not exist in reality such as:
>
	2021/02/29
	2021/14/59
<
The date is corrected to a date that actually exists when incrementing.

										*dial-augends-date#[%m/%d]*
date#[%m/%d]~

Matches dates with the following format (month/day):

>
	12/31
	01/01
	02/13
<

If we take `12/31` as an example, the following rules will determine the
target of the increment.

* If the cursor is to the left of `12`: day
* If the cursor is over any of `12`: month
* If the cursor is over any of `/31`: day

The format matches dates that do not exist in reality, and the date is
corrected to a date that actually exists when incrementing.

										*dial-augends-date#[%-m/%-d]*
date#[%-m/%-d]~

Basically it is same as |date#[%m/%d]|, but this one will match even if the
month and date are not padded to two digits:
>
	12/31
	1/1
	2/13
<

Unlike |date#[%m/%d]| and others, this format does not match dates that do not
exist in reality.  The reason for this is to avoid accidentally matching a
string that represents something other than a date, such as a fraction.

										*dial-augends-date#[%Y-%m-%d]*
date#[%Y-%m-%d]~

Matches dates with the following format (year-month-day):
>
	1970-12-31
	2021-01-01
	2021-02-13
<
Same as |date#[%Y/%m/%d]| except the difference of the format.

										*dial-augends-date#[%Y年%-m月%-d日]*
date#[%Y年%-m月%-d日]~

Matches dates with the following format (commonly used in Japan):
>
	1970年12月31日
	2021年1月1日
	2021年2月13日
<
Same as |date#[%Y/%m/%d]| except the difference of the format.

									*dial-augends-date#[%Y年%-m月%-d日(%ja)]*
date#[%Y年%-m月%-d日(%ja)]~

Matches dates with the following format (commonly used in Japan):
>
	1970年12月31日(木)
	2021年1月1日(金)
	2021年2月13日(土)
<
Same as |date#[%Y/%m/%d]| except the difference of the format.
If the date and day of the week are inconsistent, it will be matched and
automatically corrected to the correct day of the week when incrementing or
decrementing.

										*dial-augends-date#[%H:%M:%S]*
date#[%H:%M:%S]~

Matches times with the following format (hour:minute:second):
>
	00:00:00
	12:34:56
<

If we take `12:34:56` as an example, the following rules will determine the
target of the increment.

* If the cursor is to the left of `12`: second
* If the cursor is over any of `12`: hour
* If the cursor is over any of `:34`: minute
* If the cursor is over any of `:56`: second

The format matches times that do not exist in reality such as `52:27:93`, and
the time is corrected to a date that actually exists when incrementing.

										*dial-augends-date#[%H:%M]*
date#[%H:%M]~

Matches times with the following format (hour:minute):
>
	00:00
	12:34
<

If we take `12:34` as an example, the following rules will determine the
target of the increment.

* If the cursor is to the left of `12`: minute
* If the cursor is over any of `12`: hour
* If the cursor is over any of `:34`: minute

The format matches times that do not exist in reality such as `52:99`, and
the time is corrected to a date that actually exists when incrementing.

										*dial-augends-date#[%ja]*
date#[%ja]~

Matches Japanese day names:
>
	月
	火
	水
	木
	金
	土
	日
<

Each of these matches a |word| in the Vim sense, so some Japanese idioms such
as `日用品` will not match.


										*dial-augends-date#[%jA]*
date#[%jA]~

Matches Japanese day names:
>
	月曜日
	火曜日
	水曜日
	木曜日
	金曜日
	土曜日
	日曜日
<

Unlike |dial-augends-date#[%jA]|, this simply matches a string (not a |word|),
so even if you have a series of kanji characters, such as `毎週火曜日`, it
will match.

CHAR									*dial-augends-char*
-----

										*dial-augends-char#alph#small#word*
char#alph#small#word~

Matches a single lowercase alphabet, such as `a` or `z`. In NORMAL mode, it
will not match unless it is a separate |word| in the Vim sense. For example,
this will match the following `a`:
>
	(a)
	a.
<
while this will not match the following `a`:
>
	cafe
	2a
<

Note that the incrementing/decrementing is performed in the non-cyclic way.
That is, incrementing `z` will not change the value to `z`, and decrementing
`a` will not change the value to `a`.

										*dial-augends-char#alph#capital#word*
char#alph#capital#word~

Matches a single lowercase alphabet, such as `a` or `z`.  Other than that, it
is the same as |dial-augends-char#alph#small#word|.

										*dial-augends-char#alph#small#str*
char#alph#small#str~

Basically it is same as |dial-augends-char#alph#small#word|, but this will
match even if the target is not a separate word.

										*dial-augends-char#alph#capital#str*
char#alph#capital#str~

Basically it is same as |dial-augends-char#alph#capital#word|, but this will
match even if the target is not a separate word.

COLOR									*dial-augends-color*
-----

										*dial-augends-color#hex*
color#hex~

Matches hexadecimal color codes (#RRGGBB) such as the following:
>
	#1280af
	#808080
	#001351
<

If we take `#1280af` as an example, the following rules will determine the
target of the increment.

* If the cursor is to the left of `#1280af` or over `#` : R, G and B
* If the cursor is over any of `12`: R
* If the cursor is over any of `80`: G
* If the cursor is over any of `af`: B

MARKUP									*dial-augends-markup*
------

										*dial-augends-markup#markdown#header*
markup#markdown#header~

It matches one to six `#` at the beginning of a line, and can be used to raise
or lower the level of the header in the Markdown language.

------------------------------------------------------------------------------
DEFAULT AUGENDS							*dial-default-augends*

ノーマルモードのデフォルトの被加数は以下のとおりです。
The default augends for NORMAL mode is shown below:
>
	{
		"number#decimal",
		"number#hex",
		"number#binary",
		"date#[%Y/%m/%d]",
		"date#[%m/%d]",
		"date#[%Y-%m-%d]",
		"date#[%H:%M]",
		"date#[%jA]",
		"color#hex",
	}
<
The default augends for VISUAL mode is shown below:
>
	{
		"number#decimal",
		"number#hex",
		"number#binary",
		"date#[%Y/%m/%d]",
		"date#[%m/%d]",
		"date#[%Y-%m-%d]",
		"date#[%H:%M]",
		"date#[%jA]",
		"color#hex",
		"char#alph#small#word",
		"char#alph#capital#word",
	}
<

==============================================================================
CUSTOMIZE								*dial-customize*

Under Construction

------------------------------------------------------------------------------
DEFINE AUGENDS							*dial-define-augends*

Under Construction

------------------------------------------------------------------------------
CONVENIENT FUNCTIONS					*dial-convenient-functions*

Under Construction

vim:tw=78:fo=tcq2mM:ts=4:ft=help:norl:noet:fdm=marker:fen:cole=0
